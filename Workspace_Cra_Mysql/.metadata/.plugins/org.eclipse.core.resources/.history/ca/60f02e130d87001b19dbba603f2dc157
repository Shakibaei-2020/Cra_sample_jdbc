package com.infocom.client;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.infocom.util.DBUtil;
import com.mysql.jdbc.ResultSet;

public class NoteDeFrais {
	
	private int id_frais;
	private String raison_frais;
	private int prix_frais;
	private String date_frais;
	
	private static final String INSERT_COLLAB_SQL = "INSERT INTO collaborateur" + "  (nom_coll, societe_coll, poste_coll) VALUES " + " (?, ?, ?);";
	private static final String SELECT_COLLAB_BY_ID = "SELECT id_coll,nom_coll,societe_coll,poste_coll FROM collaborateur WHERE id_coll =?";	
	private static final String SELECT_ALL_COLLAB = "select * from collaborateur";
	 private static final String DELETE_COLLAB_SQL = "delete from collaborateur where id_coll = ?;";
	private static final String UPDATE_COLLAB_SQL = "update collaborateur set nom_coll = ?,societe_coll= ?, poste_coll =? where id_coll = ?;";
	
	public NoteDeFrais( int id_frais, String raison_frais, String prix_frais, String date_frais) {
        	this.id_coll = id_coll;
			this.nom_coll = nom_coll;
	        this.societe_coll = societe_coll;
	        this.poste_coll = poste_coll;
	    }
	 
	 
	 public int getIdCollab() {
			return id_coll;
		}
	 
	 public int setIdCollab(int id_coll) {
			return this.id_coll = id_coll;
		}
	 
	 public String getnomCollab() {
		 return nom_coll;
	 }
	 public String setnomCollab(String nom_coll) {
		 return this.nom_coll = nom_coll;
	 }
	
	 public String getsocieteCollab() {
		 return societe_coll;
	 }
	 public String setsocieteCollab(String societe_coll) {
		 return this.societe_coll = societe_coll;
	 }
	 
	 public String getpostCollab() {
		 return poste_coll;
	 }
	 public String setpostCollab(String poste_coll) {
		 return this.poste_coll = poste_coll;
	 }
	 

	  public void insertCollab(Collaborateur Collaborateur) throws SQLException {
	        System.out.println(INSERT_COLLAB_SQL);
	        try (Connection connection = DBUtil.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(INSERT_COLLAB_SQL)) {
	            preparedStatement.setString(1, Collaborateur.getnomCollab());
	            preparedStatement.setString(2, Collaborateur.getsocieteCollab());
	            preparedStatement.setString(3, Collaborateur.getpostCollab());
	            System.out.println(preparedStatement);
	            preparedStatement.executeUpdate();
	        } catch (SQLException e) {
	            System.out.println(e);
	        }
	    }
	  
	  
	  public Collaborateur selectCollab(int id_coll) {
		  Collaborateur Collaborateur = null;
	        try (Connection connection = DBUtil.getConnection();
	            PreparedStatement preparedStatement = connection.prepareStatement(SELECT_COLLAB_BY_ID)) {
	            preparedStatement.setInt(1, id_coll);
	            ResultSet rs = (ResultSet) preparedStatement.executeQuery();

	            while (rs.next()) {
	                String nom_coll = rs.getString("nom_coll");
	                String societe_coll = rs.getString("societe_coll");
	                String poste_coll = rs.getString("poste_coll");
	                
	                Collaborateur = new Collaborateur(id_coll, nom_coll, societe_coll, poste_coll);
	                System.out.println(id_coll+" "+ nom_coll +" "+ societe_coll+" "+ poste_coll);
	            }
	               
	        } catch (SQLException e) {
	            System.out.println(e);
	        }
	        return Collaborateur;
	    }
	  
	 
	  public List < Collaborateur > selectAllUsers() {

	        List < Collaborateur > Collaborateur = new ArrayList <Collaborateur> ();
	        try (Connection connection = DBUtil.getConnection();

	            PreparedStatement preparedStatement = connection.prepareStatement(SELECT_ALL_COLLAB);) {
	            System.out.println(preparedStatement);
	            ResultSet rs = (ResultSet) preparedStatement.executeQuery();
	            while (rs.next()) {
	                int id_coll = rs.getInt("id_coll");
	                String nom_coll = rs.getString("nom_coll");
	                String societe_coll = rs.getString("societe_coll");
	                String poste_coll = rs.getString("poste_coll");
	                Collaborateur.add(new Collaborateur(id_coll, nom_coll, societe_coll, poste_coll));
	                
	                System.out.println(id_coll+" "+ nom_coll +" "+ societe_coll +" "+ poste_coll);
	            }
	        } catch (SQLException e) {
	            System.out.println(e);
	        }
	        return Collaborateur;
	    }
	  
	    public boolean deleteCollab(int id_collab) throws SQLException {
	        boolean rowDeleted;
	        try (Connection connection = DBUtil.getConnection();
	        		PreparedStatement statement = connection.prepareStatement(DELETE_COLLAB_SQL);) {
	            statement.setInt(1, id_collab);
	            rowDeleted = statement.executeUpdate() > 0;
	        }
	        return rowDeleted;
	    }

	    public boolean updateCollab(Collaborateur Collaborateur) throws SQLException {
	        boolean rowUpdated;
	        try (Connection connection = DBUtil.getConnection();
	        	PreparedStatement statement = connection.prepareStatement(UPDATE_COLLAB_SQL);) {
	            statement.setString(1, Collaborateur.getnomCollab());
	            statement.setString(2, Collaborateur.getpostCollab());
	            statement.setString(3, Collaborateur.getsocieteCollab());
	            statement.setInt(4, Collaborateur.getIdCollab());

	            rowUpdated = statement.executeUpdate() > 0;
	        }
	        return rowUpdated;
	    }

}
