package com.infocom.client;

import java.sql.Connection;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import com.infocom.util.DBUtil;
import com.mysql.jdbc.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.DriverManager;

public class Collaborateur {	
	
	private int id_coll;
	private String nom_coll;
	private String societe_coll;
	private String poste_coll;
	
	private static final String INSERT_USERS_SQL = "INSERT INTO collaborateur" + "  (nom_coll, societe_coll, poste_coll) VALUES " + " (?, ?, ?);";
	private static final String SELECT_USER_BY_ID = "SELECT id_coll,nom_coll,societe_coll,poste_coll FROM collaborateur WHERE id_coll =?";	
	
	
	static ArrayList<Collaborateur> listCollab = new ArrayList<Collaborateur>();	
	
	public Collaborateur( int id_coll, String nom_coll, String societe_coll, String poste_coll) {
        	this.id_coll = id_coll;
			this.nom_coll = nom_coll;
	        this.societe_coll = societe_coll;
	        this.poste_coll = poste_coll;
	    }
	 
	 
	 public int getIdCollab() {
			return id_coll;
		}
	 
	 public int setIdCollab(int id_coll) {
			return this.id_coll = id_coll;
		}
	 
	 public String getnomCollab() {
		 return nom_coll;
	 }
	 public String setnomCollab(String nom_coll) {
		 return this.nom_coll = nom_coll;
	 }
	
	 public String getsocieteCollab() {
		 return societe_coll;
	 }
	 public String setsocieteCollab(String societe_coll) {
		 return this.societe_coll = societe_coll;
	 }
	 
	 public String getpostCollab() {
		 return poste_coll;
	 }
	 public String setpostCollab(String poste_coll) {
		 return this.poste_coll = poste_coll;
	 }
	 

	  public void insertCollab(Collaborateur Collaborateur) throws SQLException {
	        System.out.println(INSERT_USERS_SQL);
	        try (Connection connection = DBUtil.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(INSERT_USERS_SQL)) {
	            preparedStatement.setString(1, Collaborateur.getnomCollab());
	            preparedStatement.setString(2, Collaborateur.getsocieteCollab());
	            preparedStatement.setString(3, Collaborateur.getpostCollab());
	            System.out.println(preparedStatement);
	            preparedStatement.executeUpdate();
	        } catch (SQLException e) {
	            System.out.println(e);
	        }
	    }
	  
	  
	  public Collaborateur selectCollab(int id_coll) {
		  Collaborateur Collaborateur = null;
	        try (Connection connection = DBUtil.getConnection();
	            PreparedStatement preparedStatement = connection.prepareStatement(SELECT_USER_BY_ID)) {
	            preparedStatement.setInt(1, id_coll);
	            ResultSet rs = (ResultSet) preparedStatement.executeQuery();

	            while (rs.next()) {
	                String nom_coll = rs.getString("nom_coll");
	                String societe_coll = rs.getString("societe_coll");
	                String poste_coll = rs.getString("poste_coll");
	                
	                Collaborateur = new Collaborateur(id_coll, nom_coll, societe_coll, poste_coll);
	                System.out.println(id_coll+" "+ nom_coll +" "+ societe_coll+" "+ poste_coll);
	            }
	               
	        } catch (SQLException e) {
	            System.out.println(e);
	        }
	        return Collaborateur;
	    }
	  
	 
	  public List < User > selectAllUsers() {

	        // using try-with-resources to avoid closing resources (boiler plate code)
	        List < User > users = new ArrayList < > ();
	        // Step 1: Establishing a Connection
	        try (Connection connection = getConnection();

	            // Step 2:Create a statement using connection object
	            PreparedStatement preparedStatement = connection.prepareStatement(SELECT_ALL_USERS);) {
	            System.out.println(preparedStatement);
	            // Step 3: Execute the query or update query
	            ResultSet rs = preparedStatement.executeQuery();

	            // Step 4: Process the ResultSet object.
	            while (rs.next()) {
	                int id = rs.getInt("id");
	                String name = rs.getString("name");
	                String email = rs.getString("email");
	                String country = rs.getString("country");
	                users.add(new User(id, name, email, country));
	            }
	        } catch (SQLException e) {
	            printSQLException(e);
	        }
	        return users;
	    }
	
}
